import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';
import { notFound } from 'next/navigation';
import { routing } from '@/i18n/routing';
import { Header } from '@/components/layout/header';
import { Footer } from '@/components/layout/footer';
import "../globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// 메타데이터 생성 함수 (다국어 지원)
export async function generateMetadata({ 
  params 
}: { 
  params: Promise<{ locale: string }> 
}): Promise<Metadata> {
  const { locale } = await params;
  
  // 각 언어별 메타데이터
  const metadataByLocale: Record<string, Metadata> = {
    ko: {
      title: "Next App 만들기",
      description: "create next app으로 생성됨",
    },
    en: {
      title: "Create Next App",
      description: "Generated by create next app",
    },
    zh: {
      title: "创建 Next App",
      description: "由 create next app 生成",
    },
  };
  
  return metadataByLocale[locale] || metadataByLocale.ko;
}

// 정적 경로 생성 (빌드 시 3개 언어에 대한 페이지 사전 생성)
export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}>) {
  const { locale } = await params;
  
  // 지원하지 않는 로케일인 경우 404
  if (!routing.locales.includes(locale as any)) {
    notFound();
  }
  
  // 현재 로케일의 메시지 가져오기
  const messages = await getMessages();
  
  return (
    <html lang={locale}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <NextIntlClientProvider messages={messages}>
          <div className="flex min-h-screen flex-col">
            <Header />
            <main className="flex-1">{children}</main>
            <Footer />
          </div>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
